
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.3)

2025-07-05T01:42:15.911Z  INFO 1 --- [vagas] [           main] com.vagas.vagas.VagasApplication         : Starting VagasApplication v0.0.1-SNAPSHOT using Java 21 with PID 1 (/app/vagas.jar started by root in /app)
2025-07-05T01:42:15.913Z  INFO 1 --- [vagas] [           main] com.vagas.vagas.VagasApplication         : No active profile set, falling back to 1 default profile: "default"
2025-07-05T01:42:16.491Z  INFO 1 --- [vagas] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-05T01:42:16.492Z  INFO 1 --- [vagas] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-05T01:42:16.523Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data JPA - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.application.ApplicationLogRepository; If you want this repository to be a JPA repository, consider annotating your entities with one of these annotations: jakarta.persistence.Entity, jakarta.persistence.MappedSuperclass (preferred), or consider extending one of the following types with your repository: org.springframework.data.jpa.repository.JpaRepository
2025-07-05T01:42:16.557Z  INFO 1 --- [vagas] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 57 ms. Found 6 JPA repository interfaces.
2025-07-05T01:42:16.584Z  INFO 1 --- [vagas] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-05T01:42:16.585Z  INFO 1 --- [vagas] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2025-07-05T01:42:16.589Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.application.ApplicationRepository; If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository
2025-07-05T01:42:16.589Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.candidate.CandidateRepository; If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository
2025-07-05T01:42:16.590Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.company.CompanyRepository; If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository
2025-07-05T01:42:16.590Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.jobs.JobVacancyRepository; If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository
2025-07-05T01:42:16.590Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.recruiter.RecruiterRepository; If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository
2025-07-05T01:42:16.590Z  INFO 1 --- [vagas] [           main] .RepositoryConfigurationExtensionSupport : Spring Data MongoDB - Could not safely identify store assignment for repository candidate interface com.vagas.vagas.user.UserRepository; If you want this repository to be a MongoDB repository, consider annotating your entities with one of these annotations: org.springframework.data.mongodb.core.mapping.Document (preferred), or consider extending one of the following types with your repository: org.springframework.data.mongodb.repository.MongoRepository
2025-07-05T01:42:16.592Z  INFO 1 --- [vagas] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6 ms. Found 1 MongoDB repository interface.
2025-07-05T01:42:17.031Z  INFO 1 --- [vagas] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-07-05T01:42:17.043Z  INFO 1 --- [vagas] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-07-05T01:42:17.044Z  INFO 1 --- [vagas] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-05T01:42:17.063Z  INFO 1 --- [vagas] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-07-05T01:42:17.064Z  INFO 1 --- [vagas] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1120 ms
2025-07-05T01:42:17.169Z  INFO 1 --- [vagas] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-05T01:42:17.206Z  INFO 1 --- [vagas] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-05T01:42:17.241Z  INFO 1 --- [vagas] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-07-05T01:42:17.448Z  INFO 1 --- [vagas] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-05T01:42:17.480Z  INFO 1 --- [vagas] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-07-05T01:42:17.697Z  INFO 1 --- [vagas] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7ec13984
2025-07-05T01:42:17.698Z  INFO 1 --- [vagas] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-07-05T01:42:17.725Z  WARN 1 --- [vagas] [           main] org.hibernate.orm.deprecation            : HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-05T01:42:17.744Z  INFO 1 --- [vagas] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 16.9
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-05T01:42:18.592Z  INFO 1 --- [vagas] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: set client_min_messages = WARNING
Hibernate: alter table if exists application_entity drop constraint if exists FK37wap26hlalykpg7puyio8ftm
Hibernate: alter table if exists application_entity drop constraint if exists FK2jwvfb145jfc79t244pkkxp69
Hibernate: alter table if exists candidate_profile drop constraint if exists FKdnxpt1u3e0cf9s72bklyrnlkd
Hibernate: alter table if exists companies_recruiters drop constraint if exists FKl81pxt9p1xfo9d13rc6b3extp
Hibernate: alter table if exists companies_recruiters drop constraint if exists FKhbbr3ber7q9i78r01jfo91njn
Hibernate: alter table if exists company_profile drop constraint if exists FKj4xk8o3fspkr9ut54airmbbq9
Hibernate: alter table if exists job_vacancy drop constraint if exists FK75tbbkvp880f0hvscprngr05c
Hibernate: alter table if exists job_vacancy drop constraint if exists FKlfxw3q8wx1w52p366r7ouocd
Hibernate: alter table if exists recruiter_profile drop constraint if exists FKr8bokgpi4d9hujdhfm0u7ltlk
Hibernate: drop table if exists application_entity cascade
Hibernate: drop table if exists candidate_profile cascade
Hibernate: drop table if exists companies_recruiters cascade
Hibernate: drop table if exists company_profile cascade
Hibernate: drop table if exists job_vacancy cascade
Hibernate: drop table if exists recruiter_profile cascade
Hibernate: drop table if exists users cascade
Hibernate: create table application_entity (created_at timestamp(6) not null, candidate_id uuid not null, id uuid not null, job_id uuid not null, observation varchar(255), status varchar(255) not null check (status in ('INSCRITO','EM_ANALISE','ENTREVISTA','ELIMINADO','APROVADO')), primary key (id))
Hibernate: create table candidate_profile (birthdate date not null, id uuid not null, user_id uuid not null unique, social_number varchar(63), primary key (id))
Hibernate: create table companies_recruiters (company_id uuid not null, recruiter_id uuid not null)
Hibernate: create table company_profile (id uuid not null, user_id uuid not null unique, social_number varchar(63) not null, address varchar(255) not null, primary key (id))
Hibernate: create table job_vacancy (company_id uuid, id uuid not null, recruiter_id uuid not null, description varchar(1007) not null, job_level varchar(255) not null check (job_level in ('TRAINEE','INTERNSHIP','JUNIOR','MIDDLE','SENIOR','PRINCIPAL','STAFF')), title varchar(255) not null, primary key (id))
Hibernate: create table recruiter_profile (id uuid not null, user_id uuid not null unique, primary key (id))
Hibernate: create table users (id_user uuid not null, phone varchar(63) not null, email varchar(255) not null unique, name varchar(255) not null, password varchar(255) not null, role varchar(255) not null check (role in ('CANDIDATE','RECRUITER','COMPANY')), primary key (id_user))
Hibernate: alter table if exists application_entity add constraint FK37wap26hlalykpg7puyio8ftm foreign key (candidate_id) references candidate_profile
Hibernate: alter table if exists application_entity add constraint FK2jwvfb145jfc79t244pkkxp69 foreign key (job_id) references job_vacancy
Hibernate: alter table if exists candidate_profile add constraint FKdnxpt1u3e0cf9s72bklyrnlkd foreign key (user_id) references users
Hibernate: alter table if exists companies_recruiters add constraint FKl81pxt9p1xfo9d13rc6b3extp foreign key (company_id) references company_profile
Hibernate: alter table if exists companies_recruiters add constraint FKhbbr3ber7q9i78r01jfo91njn foreign key (recruiter_id) references recruiter_profile
Hibernate: alter table if exists company_profile add constraint FKj4xk8o3fspkr9ut54airmbbq9 foreign key (user_id) references users
Hibernate: alter table if exists job_vacancy add constraint FK75tbbkvp880f0hvscprngr05c foreign key (company_id) references company_profile
Hibernate: alter table if exists job_vacancy add constraint FKlfxw3q8wx1w52p366r7ouocd foreign key (recruiter_id) references recruiter_profile
Hibernate: alter table if exists recruiter_profile add constraint FKr8bokgpi4d9hujdhfm0u7ltlk foreign key (user_id) references users
2025-07-05T01:42:18.657Z  INFO 1 --- [vagas] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-05T01:42:19.131Z  INFO 1 --- [vagas] [           main] org.mongodb.driver.client                : MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "5.5.1"}, "os": {"type": "Linux", "name": "Linux", "architecture": "amd64", "version": "6.14.6-300.fc42.x86_64"}, "platform": "Java/Oracle Corporation/21+35-2513", "env": {"container": {"runtime": "docker"}}} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=MongoCredential{mechanism=null, userName='${MONGO_INITDB_ROOT_USERNAME}', source='admin', password=<hidden>, mechanismProperties=<hidden>}, transportSettings=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.client.model.mql.ExpressionCodecProvider@489c15e2, com.mongodb.Jep395RecordCodecProvider@923bf67, com.mongodb.KotlinCodecProvider@938e54a]}, loggerSettings=LoggerSettings{maxDocumentLength=1000}, clusterSettings={hosts=[mongodb:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='15 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, proxySettings=ProxySettings{host=null, port=null, username=null, password=null}}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverMonitoringMode=AUTO, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, dnsClient=null, inetAddressResolver=null, contextProvider=null, timeoutMS=null}
2025-07-05T01:42:19.141Z  INFO 1 --- [vagas] [}-mongodb:27017] org.mongodb.driver.cluster               : Monitor thread successfully connected to server with description ServerDescription{address=mongodb:27017, type=STANDALONE, cryptd=false, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=25, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=18229133, minRoundTripTimeNanos=0}
2025-07-05T01:42:19.346Z  INFO 1 --- [vagas] [           main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-07-05T01:42:19.346Z  WARN 1 --- [vagas] [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-07-05T01:42:19.402Z  WARN 1 --- [vagas] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-05T01:42:19.696Z DEBUG 1 --- [vagas] [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-05T01:42:19.982Z  INFO 1 --- [vagas] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-07-05T01:42:19.989Z  INFO 1 --- [vagas] [           main] com.vagas.vagas.VagasApplication         : Started VagasApplication in 4.434 seconds (process running for 4.823)
2025-07-05T01:42:31.353Z  INFO 1 --- [vagas] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-05T01:42:31.353Z  INFO 1 --- [vagas] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-07-05T01:42:31.354Z  INFO 1 --- [vagas] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2025-07-05T01:42:31.366Z DEBUG 1 --- [vagas] [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /auth/candidate/register
2025-07-05T01:42:31.371Z DEBUG 1 --- [vagas] [nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-07-05T01:42:31.371Z DEBUG 1 --- [vagas] [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /auth/candidate/register
Hibernate: select ue1_0.id_user,ue1_0.email,ue1_0.name,ue1_0.password,ue1_0.phone,ue1_0.role from users ue1_0 where ue1_0.email=?
Hibernate: insert into users (email,name,password,phone,role,id_user) values (?,?,?,?,?,?)
Hibernate: insert into candidate_profile (birthdate,social_number,user_id,id) values (?,?,?,?)
class com.vagas.vagas.candidate.dtos.CandidateRegisterDTO
2025-07-05T01:42:35.372Z DEBUG 1 --- [vagas] [nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing GET /candidate
2025-07-05T01:42:35.373Z DEBUG 1 --- [vagas] [nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2025-07-05T01:42:35.373Z DEBUG 1 --- [vagas] [nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured GET /candidate
Hibernate: select ce1_0.id,ce1_0.birthdate,ce1_0.social_number,ce1_0.user_id from candidate_profile ce1_0
